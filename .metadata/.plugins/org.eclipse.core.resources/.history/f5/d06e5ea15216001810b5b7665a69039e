package com.VFEG.start.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.VFEG.start.repository.ShipwreckRepository;

import ch.qos.logback.core.joran.util.beans.BeanUtil;

import com.VFEG.start.Model.Shipwreck;

@RestController
@RequestMapping("api/v1")
public class ShipwreckController {
	
	@Autowired
	private ShipwreckRepository ShipwreckRepository;



	  @RequestMapping(value = "{Ship}", method = RequestMethod.GET) public double
	  sum(@RequestParam("x") double x, @RequestParam("y") double y, @PathVariable String Ship) { if ("add".equalsIgnoreCase(Ship)) return x + y; else if
	  ("sub".equalsIgnoreCase(Ship)) return x - y; return 0;
	  }
	
	
	
	@RequestMapping(value = "shipwrecks", method = RequestMethod.GET)
	public List<Shipwreck> list() {
		return ShipwreckRepository.findAll(); 
		//return ShipwreckStub.list();
	}

	@RequestMapping(value = "shipwrecks", method = RequestMethod.POST)
	public Shipwreck create(@RequestBody Shipwreck Shipwreck) {
		return ShipwreckRepository.saveAndFlush(Shipwreck);
	}

	@RequestMapping(value = "shipwrecks/{id}", method = RequestMethod.GET)
	public Shipwreck get(@PathVariable Long id) {
		return ShipwreckRepository.findOne(id);
	}

	@RequestMapping(value = "shipwrecks/{id}", method = RequestMethod.PUT)
	public Shipwreck update(@PathVariable Long id, @RequestBody Shipwreck ship) {
		Shipwreck existingShipwreck = ShipwreckRepository.findOne(id);
		BeanUtil.copyProperties(Shipwreck, existingShipwreck);
		return ShipwreckRepository.saveAndFlush(existingShipwreck);
	}

	@RequestMapping(value = "shipwrecks/{id}", method = RequestMethod.DELETE)
	public Shipwreck delete(@PathVariable Long id) {
		Shipwreck existingShipwreck = ShipwreckRepository.findOne(id);
		ShipwreckRepository.delete(existingShipwreck);
		return existingShipwreck;
	}

}
